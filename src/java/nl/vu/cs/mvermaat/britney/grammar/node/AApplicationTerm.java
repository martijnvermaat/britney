/* This file was generated by SableCC (http://www.sablecc.org/). */

package nl.vu.cs.mvermaat.britney.grammar.node;

import java.util.*;
import nl.vu.cs.mvermaat.britney.grammar.analysis.*;

public final class AApplicationTerm extends PTerm
{
    private PTerm _function_;
    private PTerm _argument_;

    public AApplicationTerm()
    {
    }

    public AApplicationTerm(
        PTerm _function_,
        PTerm _argument_)
    {
        setFunction(_function_);

        setArgument(_argument_);

    }
    public Object clone()
    {
        return new AApplicationTerm(
            (PTerm) cloneNode(_function_),
            (PTerm) cloneNode(_argument_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAApplicationTerm(this);
    }

    public PTerm getFunction()
    {
        return _function_;
    }

    public void setFunction(PTerm node)
    {
        if(_function_ != null)
        {
            _function_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _function_ = node;
    }

    public PTerm getArgument()
    {
        return _argument_;
    }

    public void setArgument(PTerm node)
    {
        if(_argument_ != null)
        {
            _argument_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _argument_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_function_)
            + toString(_argument_);
    }

    void removeChild(Node child)
    {
        if(_function_ == child)
        {
            _function_ = null;
            return;
        }

        if(_argument_ == child)
        {
            _argument_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_function_ == oldChild)
        {
            setFunction((PTerm) newChild);
            return;
        }

        if(_argument_ == oldChild)
        {
            setArgument((PTerm) newChild);
            return;
        }

    }
}
